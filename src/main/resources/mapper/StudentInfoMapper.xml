<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.StudentInfoMapper" >
  <resultMap id="BaseResultMap" type="entity.StudentInfo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="student_no" property="studentNo" jdbcType="VARCHAR" />
    <result column="student_name" property="studentName" jdbcType="VARCHAR" />
    <result column="student_sex" property="studentSex" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="student_pwd" property="studentPwd" jdbcType="VARCHAR" />
    <result column="student_grade" property="studentGrade" jdbcType="VARCHAR" />
    <result column="class_id" property="classId" jdbcType="VARCHAR" />
    <result column="specialty_id" property="specialtyId" jdbcType="VARCHAR" />
    <result column="college_id" property="collegeId" jdbcType="VARCHAR" />
    <result column="enter_time" property="enterTime" jdbcType="TIMESTAMP" />
    <result column="pay_status" property="payStatus" jdbcType="VARCHAR" />
    <result column="initial_amount" property="initialAmount" jdbcType="DECIMAL" />
    <result column="state" property="state" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="extend1" property="extend1" jdbcType="VARCHAR" />
    <result column="extend2" property="extend2" jdbcType="VARCHAR" />
    <result column="extend3" property="extend3" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, student_no, student_name, student_sex, mobile, student_pwd, student_grade, class_id, 
    specialty_id, college_id, enter_time, pay_status, initial_amount, state, create_time, 
    update_time, extend1, extend2, extend3
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="entity.StudentInfo" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student_info (student_no, student_name, 
      student_sex, mobile, student_pwd, 
      student_grade, class_id, specialty_id, 
      college_id, enter_time, pay_status, 
      initial_amount, state, create_time, 
      update_time, extend1, extend2, 
      extend3)
    values (#{studentNo,jdbcType=VARCHAR}, #{studentName,jdbcType=VARCHAR}, 
      #{studentSex,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{studentPwd,jdbcType=VARCHAR}, 
      #{studentGrade,jdbcType=VARCHAR}, #{classId,jdbcType=VARCHAR}, #{specialtyId,jdbcType=VARCHAR}, 
      #{collegeId,jdbcType=VARCHAR}, #{enterTime,jdbcType=TIMESTAMP}, #{payStatus,jdbcType=VARCHAR}, 
      #{initialAmount,jdbcType=DECIMAL}, #{state,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{extend1,jdbcType=VARCHAR}, #{extend2,jdbcType=VARCHAR}, 
      #{extend3,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="entity.StudentInfo" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into student_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentNo != null" >
        student_no,
      </if>
      <if test="studentName != null" >
        student_name,
      </if>
      <if test="studentSex != null" >
        student_sex,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="studentPwd != null" >
        student_pwd,
      </if>
      <if test="studentGrade != null" >
        student_grade,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="specialtyId != null" >
        specialty_id,
      </if>
      <if test="collegeId != null" >
        college_id,
      </if>
      <if test="enterTime != null" >
        enter_time,
      </if>
      <if test="payStatus != null" >
        pay_status,
      </if>
      <if test="initialAmount != null" >
        initial_amount,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="extend1 != null" >
        extend1,
      </if>
      <if test="extend2 != null" >
        extend2,
      </if>
      <if test="extend3 != null" >
        extend3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentNo != null" >
        #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentSex != null" >
        #{studentSex,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="studentPwd != null" >
        #{studentPwd,jdbcType=VARCHAR},
      </if>
      <if test="studentGrade != null" >
        #{studentGrade,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=VARCHAR},
      </if>
      <if test="specialtyId != null" >
        #{specialtyId,jdbcType=VARCHAR},
      </if>
      <if test="collegeId != null" >
        #{collegeId,jdbcType=VARCHAR},
      </if>
      <if test="enterTime != null" >
        #{enterTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=VARCHAR},
      </if>
      <if test="initialAmount != null" >
        #{initialAmount,jdbcType=DECIMAL},
      </if>
      <if test="state != null" >
        #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extend1 != null" >
        #{extend1,jdbcType=VARCHAR},
      </if>
      <if test="extend2 != null" >
        #{extend2,jdbcType=VARCHAR},
      </if>
      <if test="extend3 != null" >
        #{extend3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="entity.StudentInfo" >
    update student_info
    <set >
      <if test="studentNo != null" >
        student_no = #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null" >
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentSex != null" >
        student_sex = #{studentSex,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="studentPwd != null" >
        student_pwd = #{studentPwd,jdbcType=VARCHAR},
      </if>
      <if test="studentGrade != null" >
        student_grade = #{studentGrade,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        class_id = #{classId,jdbcType=VARCHAR},
      </if>
      <if test="specialtyId != null" >
        specialty_id = #{specialtyId,jdbcType=VARCHAR},
      </if>
      <if test="collegeId != null" >
        college_id = #{collegeId,jdbcType=VARCHAR},
      </if>
      <if test="enterTime != null" >
        enter_time = #{enterTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        pay_status = #{payStatus,jdbcType=VARCHAR},
      </if>
      <if test="initialAmount != null" >
        initial_amount = #{initialAmount,jdbcType=DECIMAL},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extend1 != null" >
        extend1 = #{extend1,jdbcType=VARCHAR},
      </if>
      <if test="extend2 != null" >
        extend2 = #{extend2,jdbcType=VARCHAR},
      </if>
      <if test="extend3 != null" >
        extend3 = #{extend3,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="entity.StudentInfo" >
    update student_info
    set student_no = #{studentNo,jdbcType=VARCHAR},
      student_name = #{studentName,jdbcType=VARCHAR},
      student_sex = #{studentSex,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      student_pwd = #{studentPwd,jdbcType=VARCHAR},
      student_grade = #{studentGrade,jdbcType=VARCHAR},
      class_id = #{classId,jdbcType=VARCHAR},
      specialty_id = #{specialtyId,jdbcType=VARCHAR},
      college_id = #{collegeId,jdbcType=VARCHAR},
      enter_time = #{enterTime,jdbcType=TIMESTAMP},
      pay_status = #{payStatus,jdbcType=VARCHAR},
      initial_amount = #{initialAmount,jdbcType=DECIMAL},
      state = #{state,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      extend1 = #{extend1,jdbcType=VARCHAR},
      extend2 = #{extend2,jdbcType=VARCHAR},
      extend3 = #{extend3,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
   <!-- 一下为自定义方法 -->
  <select id="listStudent" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" />
  	from student_info
  	<where>
  		<if test="studentInfo.studentNo != null and !&quot;&quot;.equals(studentInfo.studentNo.trim())">
  			and student_no = #{studentInfo.studentNo}
  		</if>
  		<if test="studentInfo.studentName != null and !&quot;&quot;.equals(studentInfo.studentName.trim())">
  			and student_name = #{studentInfo.studentName}
  		</if>
  		<if test="studentInfo.studentSex != null and !&quot;&quot;.equals(studentInfo.studentSex.trim())">
  			and student_sex = #{studentInfo.studentSex}
  		</if>
  		<if test="studentInfo.mobile != null and !&quot;&quot;.equals(studentInfo.mobile.trim())">
  			and mobile = #{studentInfo.mobile}
  		</if>
  		<if test="studentInfo.studentGrade != null and !&quot;&quot;.equals(studentInfo.studentGrade.trim())">
  			and student_grade = #{studentInfo.studentGrade}
  		</if>
  		<if test="studentInfo.classId != null and !&quot;&quot;.equals(studentInfo.classId.trim())">
  			and class_id = #{studentInfo.classId}
  		</if>
  		<if test="studentInfo.specialtyId != null and !&quot;&quot;.equals(studentInfo.specialtyId.trim())">
  			and specialty_id = #{studentInfo.specialtyId}
  		</if>
  		<if test="studentInfo.collegeId != null and !&quot;&quot;.equals(studentInfo.collegeId.trim())">
  			and college_id = #{studentInfo.collegeId}
  		</if>
  		<if test="studentInfo.enterTime != null and !&quot;&quot;.equals(studentInfo.enterTime.trim())">
  			and enter_time = #{studentInfo.enterTime}
  		</if>
  		<if test="studentInfo.payStatus != null and !&quot;&quot;.equals(studentInfo.payStatus.trim())">
  			and pay_status = #{studentInfo.payStatus}
  		</if>
  		<if test="studentInfo.initialAmount != null and !&quot;&quot;.equals(studentInfo.mobile.trim())">
  			and initial_amount = #{studentInfo.initialAmount}
  		</if>
  		<if test="studentInfo.state != null and !&quot;&quot;.equals(studentInfo.state.trim())">
  			and state = #{studentInfo.state}
  		</if>
  	</where>order by id limit #{page.dbIndex},#{page.dbNumber}
  </select>

  <select id="selectByParams" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" />
  	from student_info
  	<where>
  		<if test="studentInfo.studentNo != null and !&quot;&quot;.equals(studentInfo.studentNo.trim())">
  			and student_no = #{studentInfo.studentNo}
  		</if>
  		<if test="studentInfo.studentName != null and !&quot;&quot;.equals(studentInfo.studentName.trim())">
  			and student_name = #{studentInfo.studentName}
  		</if>
  		<if test="studentInfo.studentSex != null and !&quot;&quot;.equals(studentInfo.studentSex.trim())">
  			and student_sex = #{studentInfo.studentSex}
  		</if>
  		<if test="studentInfo.mobile != null and !&quot;&quot;.equals(studentInfo.mobile.trim())">
  			and mobile = #{studentInfo.mobile}
  		</if>
  		<if test="studentInfo.studentGrade != null and !&quot;&quot;.equals(studentInfo.studentGrade.trim())">
  			and student_grade = #{studentInfo.studentGrade}
  		</if>
  		<if test="studentInfo.classId != null and !&quot;&quot;.equals(studentInfo.classId.trim())">
  			and class_id = #{studentInfo.classId}
  		</if>
  		<if test="studentInfo.specialtyId != null and !&quot;&quot;.equals(studentInfo.specialtyId.trim())">
  			and specialty_id = #{studentInfo.specialtyId}
  		</if>
  		<if test="studentInfo.collegeId != null and !&quot;&quot;.equals(studentInfo.collegeId.trim())">
  			and college_id = #{studentInfo.collegeId}
  		</if>
  		<if test="studentInfo.enterTime != null and !&quot;&quot;.equals(studentInfo.enterTime.trim())">
  			and enter_time = #{studentInfo.enterTime}
  		</if>
  		<if test="studentInfo.payStatus != null and !&quot;&quot;.equals(studentInfo.payStatus.trim())">
  			and pay_status = #{studentInfo.payStatus}
  		</if>
  		<if test="studentInfo.initialAmount != null and !&quot;&quot;.equals(studentInfo.mobile.trim())">
  			and initial_amount = #{studentInfo.initialAmount}
  		</if>
  		<if test="studentInfo.state != null and !&quot;&quot;.equals(studentInfo.state.trim())">
  			and state = #{studentInfo.state}
  		</if>
  	</where>
  </select>
  
  <select id="countStudent" resultType="int" parameterType="entity.StudentInfo">
  	select count(*) from student_info
  	<where>
  		<if test="studentNo != null and !&quot;&quot;.equals(studentNo.trim())">
  			and student_no = #{studentNo}
  		</if>
  		<if test="studentName != null and !&quot;&quot;.equals(studentName.trim())">
  			and student_name = #{studentName}
  		</if>
  		<if test="studentSex != null and !&quot;&quot;.equals(studentSex.trim())">
  			and student_sex = #{studentSex}
  		</if>
  		<if test="mobile != null and !&quot;&quot;.equals(mobile.trim())">
  			and mobile = #{mobile}
  		</if>
  		<if test="studentGrade != null and !&quot;&quot;.equals(studentGrade.trim())">
  			and student_grade = #{studentGrade}
  		</if>
  		<if test="classId != null and !&quot;&quot;.equals(classId.trim())">
  			and class_id = #{classId}
  		</if>
  		<if test="specialtyId != null and !&quot;&quot;.equals(specialtyId.trim())">
  			and specialty_id = #{specialtyId}
  		</if>
  		<if test="collegeId != null and !&quot;&quot;.equals(collegeId.trim())">
  			and college_id = #{collegeId}
  		</if>
  		<if test="enterTime != null and !&quot;&quot;.equals(enterTime.trim())">
  			and enter_time = #{enterTime}
  		</if>
  		<if test="payStatus != null and !&quot;&quot;.equals(payStatus.trim())">
  			and pay_status = #{payStatus}
  		</if>
  		<if test="initialAmount != null and !&quot;&quot;.equals(initialAmount.trim())">
  			and initial_amount = #{initialAmount}
  		</if>
  		<if test="state != null and !&quot;&quot;.equals(state.trim())">
  			and state = #{state}
  		</if>
  	</where>
  </select>
  
  <insert id="insertStudentBatch" parameterType="java.util.List">
		  insert into student_info (student_no,student_name,student_sex,mobile,student_pwd,student_grade,class_id,specialty_id,college_id,enter_time，pay_status，initial_amount,state,create_time,update_time)
		        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.studentNo,jdbcType=VARCHAR},
             #{item.studentName,jdbcType=VARCHAR},
             #{item.studentSex,jdbcType=VARCHAR},
             #{item.mobile,jdbcType=VARCHAR},
             #{item.studentPwd,jdbcType=VARCHAR},
             #{item.studentGrade,jdbcType=VARCHAR},
             #{item.classId,jdbcType=VARCHAR},
             #{item.specialtyId,jdbcType=VARCHAR},
             #{item.collegeId,jdbcType=VARCHAR},
             #{item.enterTime,jdbcType=TIMESTAMP},
             #{item.payStatus,jdbcType=VARCHAR},
             #{item.initialAmount,jdbcType=DECIMAL},
             #{item.state,jdbcType=TINYINT},
             #{item.createTime,jdbcType=TIMESTAMP},
             #{item.updateTime,jdbcType=TIMESTAMP}
             )
        </foreach>
  </insert>
</mapper>