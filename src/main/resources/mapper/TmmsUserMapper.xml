<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.TmmsUserMapper" >
  <resultMap id="BaseResultMap" type="entity.TmmsUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, role_id, state, create_time, update_time
  </sql>
  <select id="getByUserName" parameterType="String" resultMap="BaseResultMap">
		select * from tmms_user where username=#{username}
	</select>
	
	<select id="getRoles" parameterType="String" resultType="String">
		select r.role_name from tmms_user u,user_role r where u.role_id=r.id and u.username=#{username}
	</select>
	
	<select id="getPermissions" parameterType="String" resultType="String">
		select p.permission_id from tmms_user u,user_role r,role_permission p where u.role_id=r.id and p.role_id=r.id and u.username=#{username}
	</select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from tmms_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tmms_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="entity.TmmsUser" >
    insert into tmms_user (username, password, 
      role_id, state, create_time, 
      update_time)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{roleId,jdbcType=INTEGER}, #{state,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="entity.TmmsUser" >
    insert into tmms_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="entity.TmmsUser" >
    update tmms_user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="entity.TmmsUser" >
    update tmms_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=INTEGER},
      state = #{state,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
<!-- 一下为自定义方法 -->
  <select id="listTmmsUser" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" />
  	from tmms_user
  	<where>
  		<if test="tmmsUser.username != null and !&quot;&quot;.equals(tmmsUser.username.trim())">
  			and username = #{tmmsUser.username}
  		</if>
  		<if test="tmmsUser.roleId != null">
  			and role_id = #{tmmsUser.roleId}
  		</if>
  		<if test="tmmsUser.state != null and !&quot;&quot;.equals(tmmsUser.state.trim())">
  			and state = #{tmmsUser.state}
  		</if>
  	</where>order by id limit #{page.dbIndex},#{page.dbNumber}
  	
  </select>
  
  <select id="countTmmsUser" resultType="int" parameterType="entity.TmmsUser">
  	select count(*) from tmms_user
  	<where>
  		<if test="username != null and !&quot;&quot;.equals(username.trim())">
  			and username = #{username}
  		</if>
  		<if test="roleId != null ">
  			and role_id = #{roleId}
  		</if>
  		<if test="state != null and !&quot;&quot;.equals(state.trim())">
  			and state = #{state}
  		</if>
  	</where>
  </select>
  
  <select id="selectByParams" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" />
  	from tmms_user
  	<where>
  		<if test="tmmsUser.username != null and !&quot;&quot;.equals(tmmsUser.username.trim())">
  			and username = #{tmmsUser.username}
  		</if>
  		<if test="tmmsUser.roleId != null and !&quot;&quot;.equals(tmmsUser.roleId.trim())">
  			and role_id = #{tmmsUser.roleId}
  		</if>
  		<if test="tmmsUser.state != null and !&quot;&quot;.equals(tmmsUser.state.trim())">
  			and state = #{tmmsUser.state}
  		</if>
  	</where>
  </select>
  
  <insert id="insertTmmsUserBatch" parameterType="java.util.List">
		  insert into tmms_user (username,password,role_id,state,create_time,update_time)
		        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.username,jdbcType=VARCHAR},
             #{item.password,jdbcType=VARCHAR},
             #{item.state,jdbcType=TINYINT},
             #{item.createTime,jdbcType=TIMESTAMP},
             #{item.updateTime,jdbcType=TIMESTAMP}
             )
        </foreach>
  </insert>
</mapper>