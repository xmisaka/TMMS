<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!--配置spring mvc -->

	<!--0.扫描controller包 -->
	<context:component-scan base-package="controller" />

	<!--1.开启springmvc注解模式 a.自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter 
		b.默认提供一系列的功能:数据绑定，数字和日期的format@NumberFormat,@DateTimeFormat c:xml,json的默认读写支持 -->
	<mvc:annotation-driven />

	<!-- 2.访问静态资源 <mvc:resources location="/resources/" mapping="/resources//**"/> -->
	
	<!--2.静态资源默认servlet配置 -->
	<!-- 1).加入对静态资源处理：js,gif,png 2).允许使用 "/" 做整体映射 -->
	<mvc:default-servlet-handler />

	<!--3.视图模式配置，定义跳转文件的前缀和后缀 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!--4.文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
	
	<!-- 5.数据校验 -->
    <!-- 国际化配置 -->    
     <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
     <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
          <property name="basenames">
             <list>
                 <value>classpath:resource/ValidationMessages</value>
             </list>
        </property>
         <property name="useCodeAsDefaultMessage" value="true" />
     </bean>
    <!-- 表单校验器 -->
     <mvc:annotation-driven validator="validator" />
 
     <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
         <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
         <!-- 这里配置将使用上面国际化配置的messageSource -->
         <property name="validationMessageSource" ref="messageSource" />
     </bean> 
    <!-- 6.Shiro的spring拦截器开启-->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	        depends-on="lifecycleBeanPostProcessor" /> -->
	        
	<!-- 7.定时任务的配置-->
	<!-- 第一步、Scheduler的配置。 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 
     <bean id="scheduler" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
          <property name="triggers">
              <list>
                  <ref bean="trigger"/>
              </list>
          </property>
      </bean>  -->
      <!-- 第二步、Trigger的配置。 定义触发时间   每天凌晨2点执行一次 
     <bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
          <property name="jobDetail">
              <ref bean="jobDetail"/>
          </property>
          <property name="cronExpression">
             <value>0 0 2 * * ?</value>
          </property>
      </bean>-->
      <!-- 第三步.JobDetail的配置。 定义调用对象和调用对象的方法
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
          <property name="targetObject">
              <ref bean="orderJob"/>
          </property>
          <property name="targetMethod">
              <value>doTask</value>
          </property>
          <property name="concurrent">  
              <value>false</value>  
          </property>  
     </bean> -->
     <!-- 第四步、业务类的配置 
    <bean id="orderJob" class="com.ylsoft.core.csm.util.OrderTask"/>-->
    
</beans>